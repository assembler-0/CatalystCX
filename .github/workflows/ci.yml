name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
    - name: Setup Build Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake clang

    - name: Configure CMake
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -G "Unix Makefiles"

    - name: Build
      run: cmake --build build --config Release

    - name: Run Tests
      run: cmake --build build --target test --config Release

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++20 --suppress=missingIncludeSystem \
          --error-exitcode=1 CatalystCX.hpp

    - name: Configure for clang-tidy
      run: cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
          clang-tidy CatalystCX.hpp -p build --checks='-*,readability-*,performance-*,modernize-*'

  sanitizers:
    name: Sanitizer Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        sanitizer: [address, thread, undefined]
    steps:
    - uses: actions/checkout@v4

    - name: Configure with Sanitizers
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_CXX_FLAGS="-fsanitize=${{ matrix.sanitizer }} -g -O1"

    - name: Build
      run: cmake --build build

    - name: Run Tests with Sanitizer
      run: cmake --build build --target test

  package:
    name: Package Release
    runs-on: ubuntu-latest
    needs: [build, static-analysis]
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4

    - name: Create Package
      run: |
        mkdir -p catalystcx-${{ github.ref_name }}
        cp CatalystCX.hpp catalystcx-${{ github.ref_name }}/
        cp README.md catalystcx-${{ github.ref_name }}/
        cp CMakeLists.txt catalystcx-${{ github.ref_name }}/
        tar -czf catalystcx-${{ github.ref_name }}.tar.gz catalystcx-${{ github.ref_name }}/

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./catalystcx-${{ github.ref_name }}.tar.gz
        asset_name: catalystcx-${{ github.ref_name }}.tar.gz
        asset_content_type: application/gzip

  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure Optimized Build
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_CXX_FLAGS="-O3 -march=native -DNDEBUG"

    - name: Build
      run: cmake --build build

    - name: Run Benchmarks
      run: |
          echo "=== Performance Test ==="
          time ctest --test-dir build --output-on-failure
          echo "=== Memory Usage Test ==="
          sudo apt-get update && sudo apt-get install -y valgrind
          valgrind --tool=massif --massif-out-file=massif.out \
            ./build/cxtest 2>/dev/null || true