name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

jobs:
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake clang

      - name: Configure Optimized Build
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_CXX_FLAGS="-O3 -march=native"

      - name: Build
        run: time cmake --build build

      - name: Run Benchmarks
        run: |
          echo "=== Performance Test ==="
          time ctest --test-dir build --output-on-failure
          echo "=== Memory Usage Test ==="
          sudo apt-get update && sudo apt-get install -y valgrind
          valgrind --tool=massif --massif-out-file=massif.out \
            ./build/cxtest 2>/dev/null || true

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cppcheck clang-tidy

    - name: Run cppcheck
      run: |
        cppcheck --enable=all --std=c++20 --suppress=missingIncludeSystem CatalystCX.hpp

    - name: Configure for clang-tidy
      run: cmake -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

    - name: Run clang-tidy
      run: |
          clang-tidy CatalystCX.hpp -p build --checks='-*,readability-*,performance-*,modernize-*'

  codecov:
    name: Run tests and collect coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Python
        uses: actions/setup-python@v4

      - name: Install dependencies
        run: pip install pytest pytest-cov

      - name: Run tests
        run: pytest --cov --cov-branch --cov-report=xml

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
